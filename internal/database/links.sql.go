// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: links.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (id, created_at, updated_at, link_name, link_url)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, link_name, link_url
`

type CreateLinkParams struct {
	LinkName string
	LinkUrl  string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink, arg.LinkName, arg.LinkUrl)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LinkName,
		&i.LinkUrl,
	)
	return i, err
}

const deleteLinkByID = `-- name: DeleteLinkByID :exec
DELETE FROM links WHERE id = $1
`

func (q *Queries) DeleteLinkByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLinkByID, id)
	return err
}

const getAllLinks = `-- name: GetAllLinks :many
SELECT id, created_at, updated_at, link_name, link_url FROM links
`

func (q *Queries) GetAllLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, getAllLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LinkName,
			&i.LinkUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkByID = `-- name: GetLinkByID :one
SELECT id, created_at, updated_at, link_name, link_url FROM links WHERE id = $1
`

func (q *Queries) GetLinkByID(ctx context.Context, id uuid.UUID) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByID, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LinkName,
		&i.LinkUrl,
	)
	return i, err
}

const getLinkByName = `-- name: GetLinkByName :one
SELECT id, created_at, updated_at, link_name, link_url FROM links WHERE link_name = $1
`

func (q *Queries) GetLinkByName(ctx context.Context, linkName string) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByName, linkName)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LinkName,
		&i.LinkUrl,
	)
	return i, err
}
